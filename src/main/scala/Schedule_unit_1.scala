package hardfloat
import Chisel._
// import chisel3._
import chisel3.util._
import chisel3 . iotesters ._
import org.scalatest._
 class Schedule_unit extends Module{
     val io = IO (new Bundle{
        val invDz_div          = Input(Bits(32.W))//(dirx*v00.x + diry*v00.y + dirz*v00.z)
        val valid_in              = Input(Bool())
        val v11                       = new Float().asInput
        val v22                       = new Float().asInput
        val ray_in                 = Input(UInt(32.W))
        val Oz                        = Input(UInt(32.W))
        val ray_o_in           = new ray().asInput
        val ray_d_in           = new ray().asInput
        val node_id_in      = Input(SInt(32.W))
        val hitT_in               = Input(UInt(32.W))
        val break_in            = Input(Bool())
        val RAY_AABB_1       = Input(Bool())
        val RAY_AABB_2       = Input(Bool())
        val fdiv_out             = Output(Bits(32.W))
        val valid_out           = Output(Bool())
        val v11_out              = new Float().asOutput
        val v22_out              = new Float().asOutput
        val ray_out              = Output(UInt(32.W))
        val Oz_out               = Output(UInt(32.W))
        val ray_o_out         = new ray().asOutput
        val ray_d_out         = new ray().asOutput
        // val Oz_out               = Output(UInt(32.W))
        val node_id_out   = Output(SInt(32.W))
        val hitT_out            = Output(UInt(32.W))
        val counter_fdiv    = Output(UInt(32.W))
        val break_out         = Output(Bool())
        val RAY_AABB_1_out    = Output(Bool())
        val RAY_AABB_2_out    = Output(Bool())
     }) 
    // when(io.valid_in){
    val   FP_inverter         = Module(new fp_inverter())
    
    FP_inverter.io.in1              := io.invDz_div
    io.fdiv_out                             := FP_inverter.io.out
    
    val v11_temp_1          = RegInit(0.U(128.W))
	val v22_temp_1          = RegInit(0.U(128.W))
	val ray_temp_1           = RegInit(0.U(32.W))
	val Oz_temp_1            = RegInit(0.U(32.W))
	val ray_o_temp_1      = RegInit(0.U(96.W))
	val ray_d_temp_1      = RegInit(0.U(96.W))
	val node_id_temp_1 = RegInit(0.S(32.W))
	val hitT_temp_1          = RegInit(0.U(32.W))
	val inValid_1				   = RegInit(0.U(1.W))
    val break_1                    = RegInit(0.U(1.W))
    val ray_aabb_1                  = RegInit(0. U(1.W))
    val ray_aabb_2                  = RegInit(0. U(1.W))

	v11_temp_1                             := chisel3.util.Cat(io.v11.w,io.v11.z,io.v11.y,io.v11.x)
	v22_temp_1                             := chisel3.util.Cat(io.v22.w,io.v22.z,io.v22.y,io.v22.x)
	ray_temp_1                              := io.ray_in
	Oz_temp_1                               := io.Oz
	ray_o_temp_1                         := chisel3.util.Cat(io.ray_o_in.z,io.ray_o_in.y,io.ray_o_in.x)
	ray_d_temp_1                         := chisel3.util.Cat(io.ray_d_in.z,io.ray_d_in.y,io.ray_d_in.x)
	node_id_temp_1                    := io.node_id_in
	hitT_temp_1                             := io.hitT_in
    inValid_1                                    := io.valid_in
    break_1                                       := io.break_in
    ray_aabb_1                         := io.RAY_AABB_1
    ray_aabb_2                         := io.RAY_AABB_2

	val v11_temp_2          = RegInit(0.U(128.W))
	val v22_temp_2          = RegInit(0.U(128.W))
	val ray_temp_2           = RegInit(0.U(32.W))
	val Oz_temp_2            = RegInit(0.U(32.W))
	val ray_o_temp_2      = RegInit(0.U(96.W))
	val ray_d_temp_2      = RegInit(0.U(96.W))
	val node_id_temp_2 = RegInit(0.S(32.W))
	val hitT_temp_2          = RegInit(0.U(32.W))
	val inValid_2				   = RegInit(0.U(1.W))
    val break_2                    = RegInit(0.U(1.W))
    val ray_aabb_1_2             = RegInit(0. U(1.W))
    val ray_aabb_2_2             = RegInit(0. U(1.W))

	v11_temp_2					:= v11_temp_1
	v22_temp_2					:= v22_temp_1
	ray_temp_2				   	 := ray_temp_1
	Oz_temp_2				     := Oz_temp_1
	ray_o_temp_2		      := ray_o_temp_1
	ray_d_temp_2		      := ray_d_temp_1
	node_id_temp_2		  := node_id_temp_1
	hitT_temp_2					:= hitT_temp_1
	inValid_2						 := inValid_1
    break_2                           := break_1
    ray_aabb_1_2                    := ray_aabb_1
    ray_aabb_2_2                    := ray_aabb_2

	val v11_temp_3          = RegInit(0.U(128.W))
	val v22_temp_3          = RegInit(0.U(128.W))
	val ray_temp_3           = RegInit(0.U(32.W))
	val Oz_temp_3            = RegInit(0.U(32.W))
	val ray_o_temp_3      = RegInit(0.U(96.W))
	val ray_d_temp_3      = RegInit(0.U(96.W))
	val node_id_temp_3 = RegInit(0.S(32.W))
	val hitT_temp_3          = RegInit(0.U(32.W))
	val inValid_3				   = RegInit(0.U(1.W))
    val break_3                    = RegInit(0.U(1.W))
    val ray_aabb_1_3             = RegInit(0. U(1.W))
    val ray_aabb_2_3             = RegInit(0. U(1.W))

	v11_temp_3					:= v11_temp_2
	v22_temp_3					:= v22_temp_2
	ray_temp_3				   	 := ray_temp_2
	Oz_temp_3				     := Oz_temp_2
	ray_o_temp_3		      := ray_o_temp_2
	ray_d_temp_3		      := ray_d_temp_2
	node_id_temp_3		  := node_id_temp_2
	hitT_temp_3  				:= hitT_temp_2
	inValid_3						 := inValid_2
    break_3                           := break_2
    ray_aabb_1_3                    := ray_aabb_1_2
    ray_aabb_2_3                    := ray_aabb_2_2
    val v11_temp_4          = RegInit(0.U(128.W))
	val v22_temp_4          = RegInit(0.U(128.W))
	val ray_temp_4           = RegInit(0.U(32.W))
	val Oz_temp_4            = RegInit(0.U(32.W))
	val ray_o_temp_4      = RegInit(0.U(96.W))
	val ray_d_temp_4      = RegInit(0.U(96.W))
	val node_id_temp_4 = RegInit(0.S(32.W))
	val hitT_temp_4          = RegInit(0.U(32.W))
	val inValid_4				   = RegInit(0.U(1.W))
    val break_4                    = RegInit(0.U(1.W))
    val ray_aabb_1_4             = RegInit(0. U(1.W))
    val ray_aabb_2_4             = RegInit(0. U(1.W))

	v11_temp_4					:= v11_temp_3
	v22_temp_4					:= v22_temp_3
	ray_temp_4				   	 := ray_temp_3
	Oz_temp_4				     := Oz_temp_3
	ray_o_temp_4		      := ray_o_temp_3
	ray_d_temp_4		      := ray_d_temp_3
	node_id_temp_4		  := node_id_temp_3
	hitT_temp_4  				:= hitT_temp_3
	inValid_4						 := inValid_3
    break_4                           := break_3
    ray_aabb_1_4                    := ray_aabb_1_3
    ray_aabb_2_4                    := ray_aabb_2_3

    io.valid_out    			   			:= inValid_4
	io.v11_out.x                           := v11_temp_4(31,0)
	io.v11_out.y                           := v11_temp_4(63,32)
	io.v11_out.z                           := v11_temp_4(95,64)
	io.v11_out.w                          := v11_temp_4(127,96)
	io.v22_out.x                           := v22_temp_4(31,0)
	io.v22_out.y                           := v22_temp_4(63,32)
	io.v22_out.z                           := v22_temp_4(95,64)
	io.v22_out.w                         := v22_temp_4(127,96)
	// io.v22_out                              := v22_temp
	io.ray_out                               := ray_temp_4
	io.Oz_out                                := Oz_temp_4
	io.ray_o_out.x                      := ray_o_temp_4(31,0)
	io.ray_o_out.y                      := ray_o_temp_4(63,32)
	io.ray_o_out.z                      := ray_o_temp_4(95,64)
	io.ray_d_out.x                      := ray_d_temp_4(31,0)
	io.ray_d_out.y                      := ray_d_temp_4(63,32)
	io.ray_d_out.z                      := ray_d_temp_4(95,64)
	io.node_id_out					  := node_id_temp_4
	io.hitT_out 							:= hitT_temp_4
    io.break_out                         := break_4
    io.RAY_AABB_1_out           := ray_aabb_1_4
    io.RAY_AABB_2_out           := ray_aabb_2_4
    // val FDIV_2                     = Module(new FDIV_ds())
    val count                       = RegInit(0.U(64.W))
    // FIFO_su.io.wr                    := io.valid_in
    // FIFO_v11.io.wr                  := io.valid_in
    // FIFO_v22.io.wr                  := io.valid_in
    // FIFO_ray.io.wr                   := io.valid_in
    // FIFO_Oz.io.wr                    := io.valid_in
    // FIFO_ray_o.io.wr              := io.valid_in
    // FIFO_ray_d.io.wr              := io.valid_in
    // FIFO_node.io.wr               := io.valid_in
    // FIFO_hitT.io.wr                  := io.valid_in
    // FIFO_su.io.datain             := io.invDz_div
    // FIFO_v11.io.datain          := chisel3.util.Cat(io.v11.w,io.v11.z,io.v11.y,io.v11.x)
    // FIFO_v22.io.datain          := chisel3.util.Cat(io.v22.w,io.v22.z,io.v22.y,io.v22.x)
    // FIFO_ray.io.datain           := io.ray_in
    // FIFO_Oz.io.datain            := io.Oz
    // FIFO_ray_o.io.datain      := chisel3.util.Cat(io.ray_o_in.z,io.ray_o_in.y,io.ray_o_in.x)
    // FIFO_ray_d.io.datain      := chisel3.util.Cat(io.ray_d_in.z,io.ray_d_in.y,io.ray_d_in.x)
    // FIFO_node.io.datain       := io.node_id_in 
    // FIFO_hitT.io.datain         := io.hitT_in            
    when(io.valid_in){
      count     := count +1.U
    }.otherwise{
      count     := count
    }

    io.counter_fdiv := count
  

    // io.fdiv_out                 := out_invDz
    // io.valid_out               := out_valid
 }
object SU extends App {
  (new chisel3.stage.ChiselStage).emitVerilog(new Schedule_unit())
}
class su_Simple (dut:Schedule_unit) extends PeekPokeTester(dut){
  step(1)
    step(1)
  poke(dut.io.invDz_div,1082425784.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,510.U)
  poke(dut.io.v11.y,511.U)
  poke(dut.io.v11.z,512.U)
  poke(dut.io.v11.w,513.U)
  poke(dut.io.v22.x,520.U)
  poke(dut.io.v22.y,521.U)
  poke(dut.io.v22.z,522.U)
  poke(dut.io.v22.w,523.U)
  poke(dut.io.ray_in,4.U)
  poke(dut.io.Oz,12.U)
  poke(dut.io.ray_o_in.x,530.U)
  poke(dut.io.ray_o_in.y,531.U)
  poke(dut.io.ray_o_in.z,532.U)
  poke(dut.io.ray_d_in.x,540.U)
  poke(dut.io.ray_d_in.y,541.U)
  poke(dut.io.ray_d_in.z,542.U)
  poke(dut.io.node_id_in,53.U)
  step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,10.U)
  poke(dut.io.v11.y,11.U)
  poke(dut.io.v11.z,12.U)
  poke(dut.io.v11.w,13.U)
  poke(dut.io.v22.x,20.U)
  poke(dut.io.v22.y,21.U)
  poke(dut.io.v22.z,22.U)
  poke(dut.io.v22.w,23.U)
  poke(dut.io.ray_in,1.U)
  poke(dut.io.Oz,2.U)
  poke(dut.io.ray_o_in.x,30.U)
  poke(dut.io.ray_o_in.y,31.U)
  poke(dut.io.ray_o_in.z,32.U)
  poke(dut.io.ray_d_in.x,40.U)
  poke(dut.io.ray_d_in.y,41.U)
  poke(dut.io.ray_d_in.z,42.U)
  poke(dut.io.node_id_in,3.U)
//   poke(dut.io.v22.z,22.U)
  
  step(1)
  poke(dut.io.invDz_div,1084227584.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,110.U)
  poke(dut.io.v11.y,111.U)
  poke(dut.io.v11.z,112.U)
  poke(dut.io.v11.w,113.U)
  poke(dut.io.v22.x,120.U)
  poke(dut.io.v22.y,121.U)
  poke(dut.io.v22.z,122.U)
  poke(dut.io.v22.w,123.U)
  poke(dut.io.ray_in,11.U)
  poke(dut.io.Oz,12.U)
  poke(dut.io.ray_o_in.x,130.U)
  poke(dut.io.ray_o_in.y,131.U)
  poke(dut.io.ray_o_in.z,132.U)
  poke(dut.io.ray_d_in.x,140.U)
  poke(dut.io.ray_d_in.y,141.U)
  poke(dut.io.ray_d_in.z,142.U)
  poke(dut.io.node_id_in,13.U)
    step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
  

      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
      step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
        step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
        step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
        step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
          step(1)
  poke(dut.io.invDz_div,3084227584L.U)
  poke(dut.io.valid_in,1.U)
  poke(dut.io.v11.x,210.U)
  poke(dut.io.v11.y,211.U)
  poke(dut.io.v11.z,212.U)
  poke(dut.io.v11.w,213.U)
  poke(dut.io.v22.x,220.U)
  poke(dut.io.v22.y,221.U)
  poke(dut.io.v22.z,222.U)
  poke(dut.io.v22.w,223.U)
  poke(dut.io.ray_in,21.U)
  poke(dut.io.Oz,13.U)
  poke(dut.io.ray_o_in.x,230.U)
  poke(dut.io.ray_o_in.y,231.U)
  poke(dut.io.ray_o_in.z,232.U)
  poke(dut.io.ray_d_in.x,240.U)
  poke(dut.io.ray_d_in.y,241.U)
  poke(dut.io.ray_d_in.z,242.U)
  poke(dut.io.node_id_in,23.U)
  step(1)
  // poke(dut.io.invDz_div,1092616192.U)
  poke(dut.io.valid_in,0.U)
//   step(1)
//   poke(dut.io.invDz_div,1101004800.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div,1101004820.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div,1101004830.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div,1084227084.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div,1092616092.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div, 01004000.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div,1101004020.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.invDz_div,1101004030.U)
//   poke(dut.io.valid_in,1.U)
//   step(1)
//   poke(dut.io.valid_in,0.U)

  // poke(dut.io.a,1067450322.U)
//   poke(dut.io.b,1073741822.U)

//   step(1)
//   poke(dut.io.inValid,0.U)
  step(70)

  }
object su_test extends App {
  chisel3.iotesters.Driver.execute(args, () => new Schedule_unit())(c => new su_Simple(c))
}


//-1          10111111100000000000000000000000   3212836864
//1            00111111100000000000000000000000     1065353216